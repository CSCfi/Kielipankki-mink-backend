openapi: 3.0.0
servers:
- url: https://ws.spraakbanken.gu.se/ws/min-sb
  description: Test server
info:
  title: Min SB API
  version: 0.0.dev0
  description: '# Introduction

    Web API serving as a backend to Mink.


    For now the API is used for uploading corpus data to a storage server and processing
    that data with Sparv.


    # Workflow

    A workflow for processing data with Sparv via Mink could look like this:


    1. <a href="#operation/createcorpus">Create a new corpus</a>

    2. <a href="#operation/uploadsources">Upload some corpus source files</a>

    3. <a href="#operation/uploadconfig">Upload a corpus config file</a>

    4. <a href="#operation/runSparv">Run Sparv</a>

    5. <a href="#operation/checkstatus">Check the status</a>

    6. <a href="#operation/downloadexports">Download export files</a>


    Please note that the user needs to make a `/check-status` call after the annotation
    process in order for the export

    files to be synced to the storage server. This is due to authentication restrictions.
    Once the annotation process

    with Sparv is complete and a `/check-status` call is made, the export files will
    by synced automatically.


    # Parameters

    Parameters such as `corpus_id` can usually be provided as a query parameter or
    as form data.

    The following two examples will thus result in the same response:


    `curl -X GET -u some_username ''{{host}}/list-sources?corpus_id=some_corpus_name''`


    `curl -X GET -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/list-sources''`


    # Responses

    Most responses will be in json format. Json responses contain a `status` field
    which will have the value `success`

    if the response code is 200 and `error` otherwise. Thus this `status` merely reports
    whether the call was processed

    correctly. Most responses contain a `message` field with information about what
    was done during the call or where

    things went wrong. Each call may have an arbitrary amount of additional fields
    containing more information or data.'
  x-logo:
    url: placeholder
  contact:
    name: Spr√•kbanken
    url: https://spraakbanken.gu.se/
    email: sb-info@svenska.gu.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /init:
    post:
      summary: init Min SB
      description: 'Call this route before using Min SB for the first time. Creates
        a user directory on the storage server which will be used by Min SB.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/init''

        ```'
      operationId: initMinSB
      parameters: []
      responses:
        '200':
          description: init Min SB 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Nothing to be done. Mink has already been initialized
              example:
                status: success
                message: Nothing to be done. Mink has already been initialized
        '201':
          description: init Min SB 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Mink successfully initialized
              example:
                status: success
                message: Mink successfully initialized
        '401':
          description: init Min SB 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
      tags:
      - Manage Corpora
  /create-corpus:
    post:
      summary: create corpus
      description: 'Creates a new corpus on the storage server.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/create-corpus?corpus_id=some_corpus_name''

        ```'
      operationId: createcorpus
      parameters:
      - $ref: '#/components/parameters/corpus_id'
      responses:
        '200':
          description: ''
        '201':
          description: create corpus 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' created successfully
              example:
                status: success
                message: Corpus 'min-testkorpus' created successfully
        '400':
          description: create corpus 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus ID 'min_testkorpus' is invalid
              example:
                status: error
                message: Corpus ID 'min_testkorpus' is invalid
        '401':
          description: upload corpus 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: create corpus 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' already exists
              example:
                status: error
                message: Corpus 'min-testkorpus' already exists
      tags:
      - Manage Corpora
  /list-corpora:
    get:
      summary: list corpora
      description: 'Lists the names of previously uploaded corpora.


        ### Example


        ```.bash

        curl -u some_username ''{{host}}/list-corpora''

        ```'
      operationId: listcorpora
      parameters: []
      responses:
        '200':
          description: list corpora 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing available corpora
                  corpora:
                    type: array
                    example: &id001
                    - min-testkorpus
              example:
                status: success
                message: Listing available corpora
                corpora: *id001
        '401':
          description: list corpora 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
      tags:
      - Manage Corpora
  /remove-corpus:
    delete:
      summary: remove corpus
      description: 'Removes a corpus from the storage server. Will attempt to abort
        any running job for this corpus and also remove it from the Sparv server.


        ### Example


        ```.bash

        curl -X DELETE -u some_username ''{{host}}/remove-corpus?corpus_id=some_corpus_name''

        ```'
      operationId: removecorpus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: remove corpus 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' successfully removed
              example:
                status: success
                message: Corpus 'min-testkorpus' successfully removed
        '401':
          description: remove corpus 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: remove corpus 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpus' does not exist
      tags:
      - Manage Corpora
  /rename-corpus:
    post:
      summary: rename corpus
      description: 'Changes the name of a corpus on the storage server, the Sparv
        server and in the corpus config.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/rename-corpus?corpus_id=some_corpus_name&new_id=din-testkorpus''

        ```'
      operationId: renamecorpus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/new_id'
      responses:
        '200':
          description: ''
        '400':
          description: rename corpus 400 no ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: No new corpus ID was provided
              example:
                status: error
                message: No new corpus ID was provided
        '401':
          description: rename corpus 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: rename corpus 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpus' does not exist
      tags:
      - Manage Corpora
  /upload-sources:
    put:
      summary: upload sources
      description: 'Uploads the attached files as corpus source files to the storage
        server. When uploading a file with a name that already exists it will be replaced.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "files[]=@/absolute/path/to/localfile1.txt"
        -F "files[]=@/absolute/path/to/localfile2.txt" ''{{host}}/upload-sources?corpus_id=some_corpus_name''

        ```'
      operationId: uploadsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: upload sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Source files successfully added to 'min-testkorpus'
              example:
                status: success
                message: Source files successfully added to 'min-testkorpus'
        '400':
          description: upload sources 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to upload some source files to 'min-testkorpus'
                      due to incompatible file extensions
                  file:
                    type: string
                    example: text.txt
                  info:
                    type: string
                    example: incompatible file extensions
                  current_file_extension:
                    type: string
                    example: .txt
                  existing_file_extension:
                    type: string
                    example: .xml
              example:
                status: error
                message: Failed to upload some source files to 'min-testkorpus' due
                  to incompatible file extensions
                file: text.txt
                info: incompatible file extensions
                current_file_extension: .txt
                existing_file_extension: .xml
        '401':
          description: upload sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: upload sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/source/dokument1.xml
              - /home/anne/Downloads/testkorpus/source/dokument2.xml
      tags:
      - Manage Sources
  /list-sources:
    get:
      summary: list sources
      description: 'Lists the available corpus source files.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/list-sources?corpus_id=some_corpus_name''

        ```'
      operationId: listsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: list sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Current source files for 'min-testkorpus'
                  contents:
                    type: array
                    example: &id002
                    - name: dokument1.xml
                      type: application/xml
                      last_modified: '2021-11-17T15:20:54+00:00'
                      'size': 1396
                      path: /Mink/min-testkorpus/source/dokument1.xml
                    - name: dokument2.xml
                      type: application/xml
                      last_modified: '2021-11-17T15:20:54+00:00'
                      'size': 115
                      path: /Mink/min-testkorpus/source/dokument2.xml
              example:
                status: success
                message: Current source files for 'min-testkorpus'
                contents: *id002
        '401':
          description: list sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: list sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Manage Sources
  /download-sources:
    get:
      summary: download sources
      description: "Downloads corpus source files from the storage server as zip file.\n\
        \nThe parameter `file` may be used to download a specific source file. This\
        \ parameter must either be a file name or an absolute path on the Storage\
        \ server. The `zip` parameter may be set to `false` in combination the the\
        \ `file` param to avoid zipping the file to be downloaded.\n\n### Example\n\
        \n```.bash\ncurl -X GET -u some_username \n '{{host}}/download-sources?corpus_id=some_corpus_name'\
        \ --output some_corpus_name_sources.zip\n```"
      operationId: downloadsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: file
        in: query
        required: false
        style: form
        schema:
          type: string
          example: dokument1.xml
      - name: zip
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'true'
      responses:
        '200':
          description: download sources 200
          content:
            application/zip:
              schema: {}
        '401':
          description: download sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: download sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Manage Sources
  /remove-sources:
    delete:
      summary: remove sources
      description: "Remove the source files given in the `remove` parameter from the\
        \ corpus. Files are provided as a comma-separated list of paths relative to\
        \ the source directory.\n\nIf any files could not be removed they will be\
        \ listed in the error response.\n\n### Example\n\n```.bash\ncurl -X DELETE\
        \ -u some_username \n '{{host}}/remove-sources?corpus_id=some_corpus_name&remove=dokument1.xml,dokument2.xml'\n\
        ```"
      operationId: removesources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/remove'
      responses:
        '200':
          description: remove sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Source files for 'min-testkorpus' successfully removed
              example:
                status: success
                message: Source files for 'min-testkorpus' successfully removed
        '400':
          description: remove sources 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: No files provided for removal
              example:
                status: error
                message: No files provided for removal
        '401':
          description: remove sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: remove sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to remove some source files form 'min-testkorpus'.
                  failed:
                    type: array
                    example: &id003
                    - dokument2.xml
                  succeeded:
                    type: array
                    example: &id004
                    - dokument1.xml
              example:
                status: error
                message: Failed to remove some source files form 'min-testkorpus'.
                failed: *id003
                succeeded: *id004
      tags:
      - Manage Sources
  /upload-config:
    put:
      summary: upload config
      description: 'Uploads a corpus configuration, either as a file or as plain text
        with the `config` parameter. The config must be in yaml format. Read more
        about corpus config files in [the Sparv Pipeline documentation](https://spraakbanken.gu.se/sparv/#/user-manual/corpus-configuration).


        If a config file already exists for the given corpus it will be replaced by
        the newly uploaded one.


        Please note that any yaml comments may be removed from your config upon upload.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "files[]=@/absolute/path/to/config.yaml;type=text/yaml"
        ''{{host}}/upload-config?corpus_id=some_corpus_name''

        ```'
      operationId: uploadconfig
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: config
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'metadata:\n    id: min-testkorpus\nimport:\n    document_annotation:
            text\n    importer: xml_import:parse\nexport:\n    annotations:\n        -
            <sentence>:misc.id\n        - <token:baseform>\n        - <token:pos>\n        -
            <token>:sensaldo.sentiment_label\n        - SWE_DEFAULT.swener\n    source_annotations:\n        -
            dokument as document\n        - text:forfattare as author\n        - ...\ncsv_export:\n    source_annotations:\n        -
            text:id\n        - text:date\n        - text:forfattare as author'
      responses:
        '200':
          description: ''
        '201':
          description: upload config 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config file successfully uploaded for 'min-testkorpus'
              example:
                status: success
                message: Config file successfully uploaded for 'min-testkorpus'
        '400':
          description: upload config 400-incompatible
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: The importer in your config file is not compatible with
                      your source files
                  current_importer:
                    type: string
                    example: text_import
                  expected_importer:
                    type: string
                    example: xml_import
              example:
                status: error
                message: The importer in your config file is not compatible with your
                  source files
                current_importer: text_import
                expected_importer: xml_import
        '401':
          description: upload config 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: upload config 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src: /home/anne/Downloads/testkorpus/config.yaml
      tags:
      - Manage Config
  /download-config:
    get:
      summary: download config
      description: 'Downloads the corpus config file (in yaml format).


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/download-config?corpus_id=some_corpus_name''

        ```'
      operationId: downloadconfig
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: download config 200
          content:
            text/yaml; charset=utf-8:
              schema: {}
        '401':
          description: download config 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: download config 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Manage Config
  /list-exports:
    get:
      summary: list exports
      description: 'Lists the available export files created by Sparv.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/list-exports?corpus_id=some_corpus_name''

        ```'
      operationId: listexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: list exports 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Current export files for 'min-testkorpus'
                  contents:
                    type: array
                    example: &id005
                    - name: dokument1.csv
                      type: text/csv
                      last_modified: '2021-11-17T15:25:26+00:00'
                      'size': 4809
                      path: /Mink/min-testkorpus/export/csv/dokument1.csv
                    - name: dokument2.csv
                      type: text/csv
                      last_modified: '2021-11-17T15:25:29+00:00'
                      'size': 526
                      path: /Mink/min-testkorpus/export/csv/dokument2.csv
                    - name: stats_min-testkorpus.csv
                      type: text/csv
                      last_modified: '2021-11-17T15:25:27+00:00'
                      'size': 10728
                      path: /Mink/min-testkorpus/export/frequency_list/stats_min-testkorpus.csv
                    - name: dokument1_export.xml
                      type: application/xml
                      last_modified: '2021-11-17T15:25:29+00:00'
                      'size': 13147
                      path: /Mink/min-testkorpus/export/xml_pretty/dokument1_export.xml
                    - name: dokument2_export.xml
                      type: application/xml
                      last_modified: '2021-11-17T15:25:28+00:00'
                      'size': 1464
                      path: /Mink/min-testkorpus/export/xml_pretty/dokument2_export.xml
              example:
                status: success
                message: Current export files for 'min-testkorpus'
                contents: *id005
        '401':
          description: list exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: list exports 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Manage Exports
  /download-exports:
    get:
      summary: download exports
      description: 'Downloads all available export files created by Sparv.


        The parameters `file` and `dir` may be used to download a specific export
        file or a directory of export files. These parameters must be supplied as
        absolute paths on the storage server or paths relative to the export directory.
        Only one of these parameters may be applied at a time.


        The `zip` parameter may be set to `false` in combination the the `file` parameter
        to avoid zipping the file to be downloaded. If `zip` is used without the `file`
        parameter it will have no effect.


        ### Examples


        ```.bash

        curl -X GET -u some_username ''{{host}}/download-exports?corpus_id=some_corpus_name''
        --output some_corpus_name.zip

        ```


        ```.bash

        curl -X GET -u some_username ''{{host}}/download-exports?corpus_id=some_corpus_name&file=/Min
        Spr√•kbank/some_corpus_name/export/csv/dokument1.csv&zip=false'' --output dokument1.csv

        ```'
      operationId: downloadexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: zip
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'true'
      - name: file
        in: query
        required: false
        style: form
        schema:
          type: string
          example: /Mink/min-testkorpus/export/csv/dokument2.csv
      - name: dir
        in: query
        required: false
        style: form
        schema:
          type: string
          example: csv
      responses:
        '200':
          description: download exports 200
          content:
            application/zip:
              schema: {}
        '401':
          description: download exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: download exports 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Manage Exports
      security: []
  /remove-exports:
    delete:
      summary: remove exports
      description: "Removes all export files for the corpus from the storage server.\
        \ Will attempt to remove exports from the Sparv server, too, but won't crash\
        \ if this fails.\n\n### Example\n\n```.bash\ncurl -X DELETE -u some_username\
        \ \n '{{host}}/remove-exports?corpus_id=some_corpus_name'\n```"
      operationId: removeexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: remove exports 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Export files for corpus 'min-testkorpus' successfully
                      removed
              example:
                status: success
                message: Export files for corpus 'min-testkorpus' successfully removed
        '401':
          description: remove exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
      tags:
      - Manage Exports
  /download-source-text:
    get:
      summary: download source text
      description: "Downloads one of the source files in plain text. The plain text\
        \ is extracted by Sparv and therefore it can only be requested after a completed\
        \ Sparv job. \n    \nThe source file name (including its file extension) must\
        \ be specified in the `file` parameter.\n\n### Example\n\n```.bash\ncurl -X\
        \ GET -u some_username '{{host}}/download-source-text?corpus_id=some_corpus_name?file=dokument1.xml'\
        \ --output dokument1_plain.txt\n```"
      operationId: downloadsourcetext
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: file
        in: query
        required: true
        style: form
        schema:
          type: string
          example: dokument1.xml
      responses:
        '200':
          description: download source text 200
          content:
            text/plain; charset=utf-8:
              schema: {}
        '401':
          description: download source text 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
      tags:
      - Manage Exports
  /run-sparv:
    put:
      summary: run Sparv
      description: 'Adds an annotation job to the queue. The requested export formats
        may be supplied as a comma-separated list to the `exports` parameter. If no
        export formats are specified, some standard exports will be generated.


        The `files` parameter can be used to run the pipeline on a part of the corpus.
        The key to `files` is a comma-separated list of file names without file extensions,
        e.g. `files=dokument1,dokument2`.


        There can only be one annotation job for each corpus at a time. A job must
        finish annotating and syncing to the storage server or be aborted before a
        new one can be started.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" -F "exports=csv_export:csv,stats_export:freq_list,xml_export:pretty"
        ''{{host}}/run-sparv''

        ```'
      operationId: runSparv
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/exports'
      - $ref: '#/components/parameters/files'
      responses:
        '200':
          description: run Sparv 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Job has been queued
                  job_status:
                    type: string
                    example: waiting
                  sparv_exports:
                    type: array
                    example: &id006
                    - csv_export:csv
                    - stats_export:freq_list
                    - xml_export:pretty
                  available_files:
                    type: array
                    example: &id007
                    - name: dokument1.xml
                      type: application/xml
                      last_modified: '2021-11-26T13:39:09+00:00'
                      'size': 1396
                      path: /Mink/min-testkorpus/source/dokument1.xml
                    - name: dokument2.xml
                      type: application/xml
                      last_modified: '2021-11-26T13:39:08+00:00'
                      'size': 115
                      path: /Mink/min-testkorpus/source/dokument2.xml
                  files:
                    type: array
                    example: &id008
                    - dokument1
                    - dokument2
                  last_run_started:
                    type: string
                    example: '2021-11-26T13:46:30+00:00'
                  last_run_completed:
                    type: string
                    example: '2021-11-26T14:50:31+01:00'
                  priority:
                    type: integer
                    example: 1
              example:
                status: success
                message: Job has been queued
                job_status: waiting
                sparv_exports: *id006
                available_files: *id007
                files: *id008
                last_run_started: '2021-11-26T13:46:30+00:00'
                last_run_completed: '2021-11-26T14:50:31+01:00'
                priority: 1
        '400':
          description: run Sparv 400-incompatible
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: The importer in your config file is not compatible with
                      your source files
                  current_importer:
                    type: string
                    example: text_import
                  expected_importer:
                    type: string
                    example: xml_import
              example:
                status: error
                message: The importer in your config file is not compatible with your
                  source files
                current_importer: text_import
                expected_importer: xml_import
        '401':
          description: run Sparv 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: run Sparv 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
        '500':
          description: run Sparv 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: No source files found for 'min-testkorpus'
              example:
                status: error
                message: No source files found for 'min-testkorpus'
      tags:
      - Process Corpus
  /check-status:
    get:
      summary: check status
      description: 'Checks the status of the user''s annotation jobs and reports it
        in the `job_status` field for each job.


        This requests needs to be made once the corpus is done processing in order
        for the results to be synced to the storage server.


        When the `corpus_id` parameter is supplied only the job corresponding to that
        corpus ID is reported.


        The different `job_status` codes can be looked up by calling [{{host}}/status-codes](`{{host}}/status-codes`).
        If the annotation process has been started successfully a percentage of the
        completed annotation progress will be shown in the `progress` field.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/check-status''

        ```'
      operationId: checkstatus
      parameters:
      - name: corpus_id
        in: query
        required: false
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: check status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing jobs
                  jobs:
                    type: array
                    example: &id009
                    - corpus_id: min-testkorpus
                      message: An error occurred while annotating
                      sparv_output: "Sparv exited with the following error messages:\n\
                        \nThe following output files were expected but are missing:\n\
                        \ ‚Ä¢ sparv-workdir/dokument1/textt/@span\nThere can be many\
                        \ reasons for this. Please make sure that there are no problems\
                        \ \nwith the corpus configuration file, like misspelled annotation\
                        \ names or \nreferences to non-existent source annotations."
                      job_status: error
                      sparv_exports:
                      - csv_export:csv
                      - stats_export:freq_list
                      - xml_export:pretty
                      available_files:
                      - name: dokument1.xml
                        type: application/xml
                        last_modified: '2021-11-16T13:39:09+00:00'
                        'size': 1396
                        path: /Mink/min-testkorpus/source/dokument1.xml
                      - name: dokument2.xml
                        type: application/xml
                        last_modified: '2021-11-16T13:39:08+00:00'
                        'size': 115
                        path: /Mink/min-testkorpus/source/dokument2.xml
                      last_run_started: '2021-11-17T09:28:32+00:00'
                      time_taken: 0:00:42
                    - corpus_id: min-testkorpus2
                      message: Corpus is done processing and the results have been
                        synced
                      sparv_output: 'The exported files can be found in the following
                        locations:

                        ‚Ä¢ export/csv/

                        ‚Ä¢ export/frequency_list/

                        ‚Ä¢ export/xml_pretty/'
                      job_status: done
                      sparv_exports:
                      - csv_export:csv
                      available_files:
                      - name: dokument1.xml
                        type: application/xml
                        last_modified: '2021-11-19T13:39:09+00:00'
                        'size': 1396
                        path: /Mink/min-testkorpus/source/dokument1.xml
                      - name: dokument2.xml
                        type: application/xml
                        last_modified: '2021-11-19T13:39:08+00:00'
                        'size': 115
                        path: /Mink/min-testkorpus/source/dokument2.xml
                      files:
                      - dokument1
                      - dokument2
                      last_run_started: '2021-11-19T13:27:50+00:00'
                      last_run_completed: '2021-11-19T15:16:15+01:00'
                      time_taken: '1:48:25'
                    - corpus_id: min-testkorpus3
                      message: Sparv is running
                      progress: 18%
                      job_status: annotating
                      sparv_exports:
                      - stats_export:freq_list
                      - xml_export:pretty
                      available_files:
                      - name: dokument1.xml
                        type: application/xml
                        last_modified: '2021-11-19T10:39:09+00:00'
                        'size': 1396
                        path: /Mink/min-testkorpus/source/dokument1.xml
                      - name: dokument2.xml
                        type: application/xml
                        last_modified: '2021-11-19T10:39:08+00:00'
                        'size': 115
                        path: /Mink/min-testkorpus/source/dokument2.xml
                      last_run_started: '2021-11-19T10:54:10+00:00'
                      time_taken: 0:10:32
                    - corpus_id: min-testkorpus4
                      message: Job has been queued
                      job_status: waiting
                      sparv_exports:
                      - xml_export:pretty
                      available_files:
                      - name: dokument1.xml
                        type: application/xml
                        last_modified: '2021-11-29T13:39:09+00:00'
                        'size': 1396
                        path: /Mink/min-testkorpus/source/dokument1.xml
                      - name: dokument2.xml
                        type: application/xml
                        last_modified: '2021-11-29T13:39:08+00:00'
                        'size': 115
                        path: /Mink/min-testkorpus/source/dokument2.xml
                      priority: 1
              example:
                status: success
                message: Listing jobs
                jobs: *id009
        '401':
          description: check status 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: check status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-korpus' does not exist
              example:
                status: error
                message: Corpus 'min-korpus' does not exist
        '500':
          description: check status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: An error occurred while annotating
                  sparv_output:
                    type: string
                    example: "Sparv exited with the following error messages:\n\n\
                      The following output files were expected but are missing:\n\
                      \ ‚Ä¢ sparv-workdir/dokument1/textt/@span\nThere can be many reasons\
                      \ for this. Please make sure that there are no problems \nwith\
                      \ the corpus configuration file, like misspelled annotation\
                      \ names or \nreferences to non-existent source annotations."
              example:
                status: error
                message: An error occurred while annotating
                sparv_output: "Sparv exited with the following error messages:\n\n\
                  The following output files were expected but are missing:\n ‚Ä¢ sparv-workdir/dokument1/textt/@span\n\
                  There can be many reasons for this. Please make sure that there\
                  \ are no problems \nwith the corpus configuration file, like misspelled\
                  \ annotation names or \nreferences to non-existent source annotations."
      tags:
      - Process Corpus
  /abort-job:
    post:
      summary: abort job
      description: 'Attempts to abort a running Sparv job.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/abort-job?corpus_id=some_corpus_name''

        ```'
      operationId: abortjob
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: abort job 200 no job
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: No running job found for 'min-testkorpus'
              example:
                status: success
                message: No running job found for 'min-testkorpus'
        '401':
          description: abort job 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
      tags:
      - Process Corpus
  /clear-annotations:
    delete:
      summary: clear annotations
      description: "Clears the annotation and export directory for the provided corpus\
        \ on the Sparv server. This is useful if you want to process a previously\
        \ annotated corpus with a new corpus config file.\n\n### Example\n\n```.bash\n\
        curl -X DELETE -u some_username \n '{{host}}/clear-annotations?corpus_id=some_corpus_name'\n\
        ```"
      operationId: clearannotations
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: clear annotations 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Annotations for 'min-testkorpus' successfully removed
                  sparv_output:
                    type: string
                    example: '''export'' directory removed

                      ''sparv-workdir'' directory removed'
              example:
                status: success
                message: Annotations for 'min-testkorpus' successfully removed
                sparv_output: '''export'' directory removed

                  ''sparv-workdir'' directory removed'
        '401':
          description: clear annotations 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: clear annotations 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Process Corpus
  /check-changes:
    get:
      summary: check changes
      description: "Checks if any source files were changed, added or deleted since\
        \ the last Sparv run. Also checks if the config file was modified. \n\n###\
        \ Example\n\n```.bash\ncurl -X GET -u some_username \n '{{host}}/check-changes?corpus_id=some_corpus_name'\n\
        ```"
      operationId: checkchanges
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: check changes 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Your input for the corpus 'min-testkorpus' has changed
                      since the last run
                  config_changed:
                    type: integer
                    example: true
                  sources_added:
                    type: integer
                    example: true
                  sources_changed:
                    type: integer
                    example: true
                  sources_deleted:
                    type: integer
                    example: true
                  changed_config:
                    type: object
                    example: &id010
                      name: config.yaml
                      type: application/yaml
                      last_modified: '2021-11-25T15:52:17+00:00'
                      'size': 848
                      path: /Mink/min-testkorpus/config.yaml
                  added_sources:
                    type: array
                    example: &id011
                    - name: dokument4.xml
                      type: application/xml
                      last_modified: '2021-11-29T14:35:30+00:00'
                      'size': 461
                      path: /Mink/min-testkorpus/source/dokument4.xml
                  changed_sources:
                    type: array
                    example: &id012
                    - name: dokument1.xml
                      type: application/xml
                      last_modified: '2021-11-25T15:56:51+00:00'
                      'size': 1396
                      path: /Mink/min-testkorpus/source/dokument1.xml
                    - name: dokument2.xml
                      type: application/xml
                      last_modified: '2021-11-25T15:56:51+00:00'
                      'size': 115
                      path: /Mink/min-testkorpus/source/dokument2.xml
                  deleted_sources:
                    type: array
                    example: &id013
                    - name: dokument3.xml
                      type: application/xml
                      last_modified: '2021-11-29T14:22:54+00:00'
                      'size': 41
                      path: /Mink/min-testkorpus/source/dokument3.xml
                  last_run_started:
                    type: string
                    example: '2021-11-19T14:16:10+00:00'
              example:
                status: success
                message: Your input for the corpus 'min-testkorpus' has changed since
                  the last run
                config_changed: true
                sources_added: true
                sources_changed: true
                sources_deleted: true
                changed_config: *id010
                added_sources: *id011
                changed_sources: *id012
                deleted_sources: *id013
                last_run_started: '2021-11-19T14:16:10+00:00'
        '401':
          description: check changes 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate
                info: 'HTTP error: 401'
        '404':
          description: check changes 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist
      tags:
      - Process Corpus
  /api-spec:
    get:
      summary: API specification
      description: Gets the open API specification (in json format) for this API.
      operationId: APIspecification
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - Documentation
      security: []
  /api-doc:
    get:
      summary: API documentation
      description: Renders the API documentation in html.
      operationId: APIdocumentation
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - Documentation
      security: []
  /status-codes:
    get:
      summary: status codes
      description: List job status codes along with their descriptions.
      operationId: statuscodes
      parameters: []
      responses:
        '200':
          description: status codes 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing existing job status codes
                  status_codes:
                    type: array
                    example: &id014
                    - code: 0
                      name: none
                      description: Job does not exist
                    - code: 1
                      name: syncing_corpus
                      description: Syncing from the storage server to Sparv server
                    - code: 2
                      name: waiting
                      description: Waiting to be run with Sparv
                    - code: 3
                      name: annotating
                      description: Sparv annotation process is running
                    - code: 4
                      name: done_annotating
                      description: Annotation process has finished
                    - code: 5
                      name: syncing_results
                      description: Syncing results from Sparv to the storage server
                    - code: 6
                      name: done
                      description: Results have been synced to Nexcloud
                    - code: 7
                      name: error
                      description: An error occurred
                    - code: 8
                      name: aborted
                      description: Aborted by the user
              example:
                status: success
                message: Listing existing job status codes
                status_codes: *id014
      tags:
      - Documentation
      security: []
  /sparv-languages:
    get:
      summary: Sparv languages
      description: Lists languages available in Sparv along with their language codes.
      operationId: Sparvlanguages
      parameters: []
      responses:
        '200':
          description: Sparv languages 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing languages available in Sparv
                  languages:
                    type: array
                    example: &id015
                    - name: Asturian
                      code: ast
                    - name: Bulgarian
                      code: bul
                    - name: Catalan
                      code: cat
                    - name: Dutch
                      code: nld
                    - name: English
                      code: eng
                    - name: Estonian
                      code: est
                    - name: Finnish
                      code: fin
                    - name: French
                      code: fra
                    - name: Galician
                      code: glg
                    - name: German
                      code: deu
                    - name: Italian
                      code: ita
                    - name: Latin
                      code: lat
                    - name: Norwegian Bokm√•l
                      code: nob
                    - name: Polish
                      code: pol
                    - name: Portuguese
                      code: por
                    - name: Romanian
                      code: ron
                    - name: Russian
                      code: rus
                    - name: Slovak
                      code: slk
                    - name: Slovenian
                      code: slv
                    - name: Spanish
                      code: spa
                    - name: Swedish
                      code: swe
              example:
                status: success
                message: Listing languages available in Sparv
                languages: *id015
      tags:
      - Documentation
      security: []
  /sparv-exports:
    get:
      summary: Sparv exports
      description: 'Lists Sparv export formats for the chosen language. The language
        is specified with the `language` query parameter (or the `languange` key in
        the form) as ISO 639-3 code. See available languages by calling [{{host}}/sparv-languages](`{{host}}/sparv-languages`).


        If no language is supplied Swedish (`swe`) is chosen automatically.'
      operationId: Sparvexports
      parameters:
      - name: language
        in: query
        required: false
        style: form
        schema:
          type: string
          example: swe
      responses:
        '200':
          description: Sparv exports 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing exports available in Sparv
                  language:
                    type: string
                    example: swe
                  exports:
                    type: array
                    example: &id016
                    - export: conll_export:conllu
                      description: CoNLL-U (SBX version) export
                    - export: csv_export:csv
                      description: CSV export
                    - export: cwb:encode
                      description: CWB encode
                    - export: cwb:encode_scrambled
                      description: CWB encode, scrambled
                    - export: cwb:info
                      description: CWB .info file
                    - export: cwb:vrt
                      description: VRT export
                    - export: cwb:vrt_scrambled
                      description: Scrambled VRT export
                    - export: korp:lemgram_sql
                      description: Lemgram index SQL file for use in Korp
                    - export: korp:relations_sql
                      description: Word Picture SQL for use in Korp
                    - export: korp:timespan_sql
                      description: Timespan SQL data for use in Korp
                    - export: stats_export:freq_list
                      description: Corpus word frequency list
                    - export: stats_export:freq_list_simple
                      description: Corpus word frequency list (withouth Swedish annotations)
                    - export: xml_export:combined
                      description: Combined XML export (all results in one file)
                    - export: xml_export:combined_scrambled
                      description: Combined scrambled XML export
                    - export: xml_export:compressed
                      description: Compressed combined XML export
                    - export: xml_export:compressed_scrambled
                      description: Compressed combined scrambled XML export
                    - export: xml_export:preserved_format
                      description: XML export preserving whitespaces from source file
                    - export: xml_export:pretty
                      description: XML export with one token element per line
                    - export: xml_export:scrambled
                      description: Scrambled XML export
              example:
                status: success
                message: Listing exports available in Sparv
                language: swe
                exports: *id016
      tags:
      - Documentation
      security: []
  /advance-queue:
    put:
      summary: advance queue
      description: 'Check the job queue and attempt to advance it.


        1. Unqueue jobs that are done, aborted or erroneous

        2. For jobs with status "annotating", check if process is still running

        3. Run the next job in the queue if there are fewer running jobs than allowed


        For internal use only! This route is called regularly by the queue manager.'
      operationId: advancequeue
      parameters: []
      responses:
        '200':
          description: advance queue 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Queue advancing completed
              example:
                status: success
                message: Queue advancing completed
        '401':
          description: advance queue 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to confirm secret key for protected route
              example:
                status: error
                message: Failed to confirm secret key for protected route
      tags:
      - Internal Routes
      security:
      - ApiKeyAuth: []
components:
  parameters:
    corpus_id:
      name: corpus_id
      in: query
      required: true
      style: form
      schema:
        type: string
        example: min-testkorpus
    new_id:
      name: new_id
      in: query
      required: true
      style: form
      schema:
        type: string
        example: din-testkorpus
    file:
      name: file
      in: query
      required: true
      style: form
      schema:
        type: string
        example: dokument1.xml
    zip:
      name: zip
      in: query
      required: false
      style: form
      schema:
        type: string
        example: 'true'
    remove:
      name: remove
      in: query
      required: true
      style: form
      schema:
        type: string
        example: dokument1.xml,dokument2.xml
    exports:
      name: exports
      in: query
      required: false
      style: form
      schema:
        type: string
        example: csv_export:csv,stats_export:freq_list,xml_export:pretty
    files:
      name: files
      in: query
      required: false
      style: form
      schema:
        type: string
        example: dokument1,document2
    language:
      name: language
      in: query
      required: true
      style: form
      schema:
        type: string
        example: swe
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:
      type: apiKey
      in: query
      name: secret_key
security:
- basicAuth: []
tags:
- name: Manage Corpora
  description: Routes for creating, listing and removing corpora.
- name: Manage Sources
  description: Routes for uploading, listing, downloading and removing corpus source
    files.
- name: Manage Config
  description: Routes for uploading and downloading corpus config files.
- name: Manage Exports
  description: Routes for listing, downloading and removing export files.
- name: Process Corpus
  description: Routes for starting/aborting corpus annotation jobs with Sparv and
    checking job status.
- name: Documentation
  description: Routes used for documentation purposes.
- name: Internal Routes
  description: Routes for internal use only. These routes are used by the queue manager
    to advance the job queue.
externalDocs:
  url: ''
  description: ''
warnings: []
