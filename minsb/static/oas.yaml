openapi: 3.0.0
servers:
- url: https://ws.spraakbanken.gu.se/ws/min-sb
  description: Test server
info:
  title: Min SB API
  version: 0.0.dev0
  description: '# Introduction

    Web API serving as a backend to Min Språkbank.


    For now the API is used for uploading corpus data to a user''s Nextcloud

    instance and processing that data with Sparv.


    A user must have a valid [Nextcloud account](https://spraakbanken.gu.se/nextcloud)

    at Språkbanken Text. Before any data can be uploaded, Min Språkbank must be initialized

    (see <a href="#operation/initMinSB">init Min SB</a>).


    # Workflow

    A workflow for processing data with Sparv via Min Språkbank could look like this:


    1. <a href="#operation/initMinSB">Initialize Min Språkbank</a> (only once per
    user)

    2. <a href="#operation/createcorpus">Create a new corpus</a>

    3. <a href="#operation/uploadsources">Upload some corpus source files</a>

    4. <a href="#operation/uploadconfig">Upload a corpus config file</a>

    5. <a href="#operation/runSparv">Run Sparv</a>

    6. <a href="#operation/checkstatus">Check the status</a>

    7. <a href="#operation/downloadexports">Download export files</a>


    Please note that the user needs to make a `/check-status` call after the annotation
    process in order

    for the export files to be synced to Nextcloud. This is due to authentication
    restrictions. Once the annotation

    process with Sparv is complete and a `/check-status` call is made, the export
    files will by synced automatically.


    # Parameters

    Parameters such as `corpus_id` can usually be provided as a query parameter or
    as form data.

    The following two examples will thus result in the same response:


    `curl -X GET -u some_username ''{{host}}/list-sources?corpus_id=some_corpus_name''`


    `curl -X GET -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/list-sources''`'
  x-logo:
    url: placeholder
  contact:
    name: Språkbanken
    url: https://spraakbanken.gu.se/
    email: sb-info@svenska.gu.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /init:
    post:
      summary: init Min SB
      description: 'Call this route before using Min SB for the first time. Creates
        a directory in your Nextcloud instance which will be used by Min SB.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/init''

        ```'
      operationId: initMinSB
      parameters: []
      responses:
        '200':
          description: Init Min SB 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Min Språkbank successfully initialized!
              example:
                status: success
                message: Min Språkbank successfully initialized!
        '401':
          description: init Min SB 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: init Min SB 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to initialize Min Språkbank! Directory 'Min Språkbank'
                      already exists!
              example:
                status: error
                message: Failed to initialize Min Språkbank! Directory 'Min Språkbank'
                  already exists!
      tags:
      - Manage Corpora
  /create-corpus:
    post:
      summary: create corpus
      description: 'Creates a new corpus on Nextcloud.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/create-corpus?corpus_id=some_corpus_name''

        ```'
      operationId: createcorpus
      parameters:
      - $ref: '#/components/parameters/corpus_id'
      responses:
        '200':
          description: create corpus 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' created successfully!
              example:
                status: success
                message: Corpus 'min-testkorpus' created successfully!
        '401':
          description: upload corpus 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: create corpus 404-exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' already exists!
              example:
                status: error
                message: Corpus 'min-testkorpus' already exists!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - corpus_id
              - file
              properties:
                corpus_id:
                  type: string
                  example: min-testkorpus
                file:
                  type: string
                  format: binary
            example:
            - key: corpus_id
              value: min-testkorpus
              type: text
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/dokument2.xml
              - /home/anne/Downloads/testkorpus/dokument1.xml
      tags:
      - Manage Corpora
  /list-corpora:
    get:
      summary: list corpora
      description: 'Lists the names of previously uploaded corpora.


        ### Example


        ```.bash

        curl -u some_username ''{{host}}/list-corpora''

        ```'
      operationId: listcorpora
      parameters:
      - $ref: '#/components/parameters/'
      responses:
        '200':
          description: list corpora 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing available corpora
                  corpora:
                    type: array
                    example: &id001
                    - min-testkorpus
              example:
                status: success
                message: Listing available corpora
                corpora: *id001
        '401':
          description: list corpora 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
      tags:
      - Manage Corpora
  /remove-corpus:
    delete:
      summary: remove corpus
      description: 'Removes a corpus from Nextcloud. Will attempt to abort any running
        job for this corpus and also remove it from the Sparv server.


        ### Example


        ```.bash

        curl -X DELETE -u some_username ''{{host}}/remove-corpus?corpus_id=some_corpus_name''

        ```'
      operationId: removecorpus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: remove corpus 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' successfully removed!
              example:
                status: success
                message: Corpus 'min-testkorpus' successfully removed!
        '401':
          description: remove corpus 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: remove corpus 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpus' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpus' does not exist!
      tags:
      - Manage Corpora
  /upload-sources:
    put:
      summary: upload sources
      description: 'Uploads the attached files as corpus source files to Nextcloud.
        When uploading a file with a name that already exists it will be replaced.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "files[]=@/absolute/path/to/localfile1.txt"
        -F "files[]=@/absolute/path/to/localfile2.txt" ''{{host}}/upload-sources?corpus_id=some_corpus_name''

        ```'
      operationId: uploadsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: upload sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Source files successfully added to 'min-testkorpus'!
              example:
                status: success
                message: Source files successfully added to 'min-testkorpus'!
        '401':
          description: upload sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: upload sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/source/dokument2.xml
              - /home/anne/Downloads/testkorpus/source/dokument1.xml
      tags:
      - Manage Sources
  /list-sources:
    get:
      summary: list sources
      description: 'Lists the available corpus source files.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/list-sources?corpus_id=some_corpus_name''

        ```'
      operationId: listsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: list sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Current source files for 'min-testkorpus'
                  contents:
                    type: array
                    example: &id002
                    - name: dokument1.xml
                      type: application/xml
                      last_modified: Tue, 02 Mar 2021 15:31:46 GMT
                      path: /Min Språkbank/min-testkorpus/source/dokument1.xml
                    - name: dokument2.xml
                      type: application/xml
                      last_modified: Tue, 02 Mar 2021 15:31:46 GMT
                      path: /Min Språkbank/min-testkorpus/source/dokument2.xml
              example:
                status: success
                message: Current source files for 'min-testkorpus'
                contents: *id002
        '401':
          description: list sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: list sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Manage Sources
  /download-sources:
    get:
      summary: download sources
      description: "Downloads corpus source files from Nextcloud as zip file.\n\n\
        ### Example\n\n```.bash\ncurl -X GET -u some_username \n '{{host}}/download-sources?corpus_id=some_corpus_name'\n\
        ```"
      operationId: downloadsources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: download sources 200
          content:
            application/zip:
              schema: {}
        '401':
          description: download sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: download sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Manage Sources
  /remove-sources:
    delete:
      summary: remove sources
      description: "Remove the source files given in the `remove` query parameter\
        \ (or in the `remove` key in the uploaded form) from the corpus. Files are\
        \ provided as a comma-separated list of paths relative to the source directory.\n\
        \nIf any files could not be removed they will be listed in the error response.\n\
        \n### Example\n\n```.bash\ncurl -X DELETE -u some_username \n '{{host}}/remove-sources?corpus_id=some_corpus_name&remove=dokument1.xml,dokument2.xml'\n\
        ```"
      operationId: removesources
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/remove'
      responses:
        '200':
          description: remove sources 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Source files for 'min-testkorpus' successfully updated!
              example:
                status: success
                message: Source files for 'min-testkorpus' successfully updated!
        '401':
          description: remove sources 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: remove sources 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: No files provided for removal!
              example:
                status: error
                message: No files provided for removal!
      tags:
      - Manage Sources
  /upload-config:
    put:
      summary: upload config
      description: 'Uploads a corpus config file. File must be in yaml format. Read
        more about corpus config files in [the Sparv Pipeline documentation](https://spraakbanken.gu.se/sparv/#/user-manual/corpus-configuration).


        If a config file already exists for the given corpus it will be replaced by
        the newly uploaded one.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "files[]=@/absolute/path/to/config.yaml;type=text/yaml"
        ''{{host}}/upload-config?corpus_id=some_corpus_name''

        ```'
      operationId: uploadconfig
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: upload config 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Config file successfully uploaded for 'min-testkorpus'!
              example:
                status: success
                message: Config file successfully uploaded for 'min-testkorpus'!
        '401':
          description: upload config 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: upload config 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src: /home/anne/Downloads/testkorpus/config.yaml
      tags:
      - Manage Config
  /download-config:
    get:
      summary: download config
      description: 'Downloads the corpus config file (in yaml format).


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/download-config?corpus_id=some_corpus_name''

        ```'
      operationId: downloadconfig
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: download config 200
          content:
            text/yaml; charset=utf-8:
              schema: {}
        '401':
          description: download config 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: download config 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Manage Config
  /list-exports:
    get:
      summary: list exports
      description: 'Lists the available export files created by Sparv.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/list-exports?corpus_id=some_corpus_name''

        ```'
      operationId: listexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: list exports 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Current export files for 'min-testkorpus'
                  contents:
                    type: array
                    example: &id003
                    - name: dokument1.csv
                      type: text/csv
                      last_modified: Fri, 05 Mar 2021 10:37:25 GMT
                      path: /Min Språkbank/min-testkorpus/export/csv/dokument1.csv
                    - name: dokument2.csv
                      type: text/csv
                      last_modified: Fri, 05 Mar 2021 10:37:47 GMT
                      path: /Min Språkbank/min-testkorpus/export/csv/dokument2.csv
                    - name: stats_mini-swe.csv
                      type: text/csv
                      last_modified: Fri, 05 Mar 2021 10:37:45 GMT
                      path: /Min Språkbank/min-testkorpus/export/frequency_list/stats_mini-swe.csv
                    - name: dokument1_export.xml
                      type: application/xml
                      last_modified: Fri, 05 Mar 2021 10:37:24 GMT
                      path: /Min Språkbank/min-testkorpus/export/xml_pretty/dokument1_export.xml
                    - name: dokument2_export.xml
                      type: application/xml
                      last_modified: Fri, 05 Mar 2021 10:37:46 GMT
                      path: /Min Språkbank/min-testkorpus/export/xml_pretty/dokument2_export.xml
              example:
                status: success
                message: Current export files for 'min-testkorpus'
                contents: *id003
        '401':
          description: list exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: list exports 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Manage Exports
  /download-exports:
    get:
      summary: download exports
      description: 'Downloads all available export files created by Sparv.


        The parameters `file` and `dir` may be used to download a specific export
        file

        or a directory of export files. These parameters must be supplied as absolute

        Nextcloud paths or paths relative to the export directory. Only one of these
        parameter may be applied at a time.


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/download-exports?corpus_id=some_corpus_name''

        ```'
      operationId: downloadexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: download exports 200
          content:
            application/zip:
              schema: {}
        '401':
          description: download exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: download exports 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Manage Exports
  /remove-exports:
    delete:
      summary: remove exports
      description: "Removes all export files for the corpus from Nextcloud. Will attempt\
        \ to remove exports from the Sparv server, too, but won't crash if this fails.\n\
        \n### Example\n\n```.bash\ncurl -X DELETE -u some_username \n '{{host}}/remove-exports?corpus_id=some_corpus_name'\n\
        ```"
      operationId: removeexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: remove exports 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Export files for corpus 'min-testkorpus' successfully
                      removed!
              example:
                status: success
                message: Export files for corpus 'min-testkorpus' successfully removed!
        '401':
          description: remove exports 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
      tags:
      - Manage Exports
  /run-sparv:
    put:
      summary: run Sparv
      description: 'Adds an annotation job to the queue. The requested export formats
        are supplied as a comma-separated list to the `exports` query parameter or
        the `exports` key in the form.


        There can only be one annotation job for each corpus at a time. A job must
        finish annotating and syncing to Nextcloud or aborted before a new one can
        be started.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" -F "exports=csv_export:csv,stats_export:freq_list,xml_export:pretty"
        ''{{host}}/run-sparv''

        ```'
      operationId: runSparv
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/exports'
      responses:
        '200':
          description: run Sparv 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Job has been queued!
                  job_status:
                    type: string
                    example: waiting
                  priority:
                    type: integer
                    example: 1
              example:
                status: success
                message: Job has been queued!
                job_status: waiting
                priority: 1
        '401':
          description: run Sparv 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: run Sparv 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Process Corpus
  /check-status:
    get:
      summary: check status
      description: 'Checks the status of an annotation job. The different job status
        codes can be looked up by calling [{{host}}/status-codes](`{{host}}/status-codes`).


        ### Example


        ```.bash

        curl -X GET -u some_username ''{{host}}/check-status?corpus_id=some_corpus_name''

        ```'
      operationId: checkstatus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: check status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Sparv is running!
                  progress:
                    type: string
                    example: 18%
                  job_status:
                    type: string
                    example: annotating
              example:
                status: success
                message: Sparv is running!
                progress: 18%
                job_status: annotating
        '401':
          description: check status 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: check status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: An error occurred while annotating!
                  sparv_output:
                    type: string
                    example: "Sparv exited with the following error messages:\n\n\
                      The following output files were expected but are missing:\n\
                      \ • sparv-workdir/dokument1/textt/@span\nThere can be many reasons\
                      \ for this. Please make sure that there are no problems \nwith\
                      \ the corpus configuration file, like misspelled annotation\
                      \ names or \nreferences to non-existent source annotations."
              example:
                status: error
                message: An error occurred while annotating!
                sparv_output: "Sparv exited with the following error messages:\n\n\
                  The following output files were expected but are missing:\n • sparv-workdir/dokument1/textt/@span\n\
                  There can be many reasons for this. Please make sure that there\
                  \ are no problems \nwith the corpus configuration file, like misspelled\
                  \ annotation names or \nreferences to non-existent source annotations."
      tags:
      - Process Corpus
  /abort-job:
    post:
      summary: abort job
      description: 'Attempts to abort a running Sparv job.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/abort-job?corpus_id=some_corpus_name''

        ```'
      operationId: abortjob
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: abort job 200-no-job
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: No running job found for 'min-testkorpus'.
              example:
                status: success
                message: No running job found for 'min-testkorpus'.
        '401':
          description: abort job 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
      tags:
      - Process Corpus
  /clear-annotations:
    delete:
      summary: clear annotations
      description: "Clears the annotation and export directory for the provided corpus\
        \ on the Sparv server. This is useful if you want to process a previously\
        \ annotated corpus with a new corpus config file.\n\n### Example\n\n```.bash\n\
        curl -X DELETE -u some_username \n '{{host}}/clear-annotations?corpus_id=some_corpus_name'\n\
        ```"
      operationId: clearannotations
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: ''
        in: query
        required: true
        style: form
        schema:
          type: number
      responses:
        '200':
          description: clear annotations 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Annotations for 'min-testkorpus' successfully removed!
                  sparv_output:
                    type: string
                    example: '''export'' directory removed

                      ''sparv-workdir'' directory removed'
              example:
                status: success
                message: Annotations for 'min-testkorpus' successfully removed!
                sparv_output: '''export'' directory removed

                  ''sparv-workdir'' directory removed'
        '401':
          description: clear annotations 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to authenticate!
                  info:
                    type: string
                    example: 'HTTP error: 401'
              example:
                status: error
                message: Failed to authenticate!
                info: 'HTTP error: 401'
        '404':
          description: clear annotations 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Corpus 'min-testkorpuss' does not exist!
              example:
                status: error
                message: Corpus 'min-testkorpuss' does not exist!
      tags:
      - Process Corpus
  /api-spec:
    get:
      summary: API specification
      description: Gets the open API specification (in json format) for this API.
      operationId: APIspecification
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Documentation
      security: []
  /api-doc:
    get:
      summary: API documentation
      description: Renders the API documentation in html.
      operationId: APIdocumentation
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Documentation
      security: []
  /status-codes:
    get:
      summary: status codes
      description: List job status codes along with their descriptions.
      operationId: statuscodes
      parameters: []
      responses:
        '200':
          description: status codes 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Listing existing job status codes
                  status_codes:
                    type: array
                    example: &id004
                    - code: 0
                      name: none
                      description: Job does not exist
                    - code: 1
                      name: syncing_corpus
                      description: Syncing from Nextcloud to Sparv server
                    - code: 2
                      name: waiting
                      description: Waiting to be run with Sparv
                    - code: 3
                      name: annotating
                      description: Sparv annotation process is running
                    - code: 4
                      name: done_annotating
                      description: Annotation process has finished
                    - code: 5
                      name: syncing_results
                      description: Syncing results from Sparv to Nextcloud
                    - code: 6
                      name: done
                      description: Results have been synced to Nexcloud
                    - code: 7
                      name: error
                      description: An error occurred
                    - code: 8
                      name: aborted
                      description: Aborted by the user
              example:
                status: success
                message: Listing existing job status codes
                status_codes: *id004
      tags:
      - Documentation
      security: []
  /advance-queue:
    put:
      summary: advance queue
      description: 'Check the job queue and attempt to advance it.


        1. Unqueue jobs that are done, aborted or erroneous

        2. For jobs with status "annotating", check if process is still running

        3. Run the next job in the queue if there are fewer running jobs than allowed


        For internal use only! This route is called regularly by the queue manager.'
      operationId: advancequeue
      parameters: []
      responses:
        '200':
          description: advance queue 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Queue advancing completed!
              example:
                status: success
                message: Queue advancing completed!
        '401':
          description: advance queue 401
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Failed to confirm secret key for protected route!
              example:
                status: error
                message: Failed to confirm secret key for protected route!
      tags:
      - Internal Routes
      security:
      - ApiKeyAuth: []
components:
  parameters:
    corpus_id:
      name: corpus_id
      in: query
      required: true
      style: form
      schema:
        type: string
        example: min-testkorpus
    ? ''
    : name: ''
      in: query
      required: true
      style: form
      schema:
        type: number
    remove:
      name: remove
      in: query
      required: true
      style: form
      schema:
        type: string
        example: dokument1.xml,dokument2.xml
    exports:
      name: exports
      in: query
      required: true
      style: form
      schema:
        type: string
        example: csv_export:csv,stats_export:freq_list,xml_export:pretty
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:
      type: apiKey
      in: query
      name: secret_key
security:
- basicAuth: []
tags:
- name: Manage Corpora
  description: Routes for creating, listing and removing corpora.
- name: Manage Sources
  description: Routes for uploading, listing, downloading and removing corpus source
    files.
- name: Manage Config
  description: Routes for uploading and downloading corpus config files.
- name: Manage Exports
  description: Routes for listing, downloading and removing export files.
- name: Process Corpus
  description: Routes for starting/aborting corpus annotation jobs with Sparv and
    checking job status.
- name: Documentation
  description: Routes used for documentation purposes.
- name: Internal Routes
  description: Routes for internal use only. These routes are used by the queue manager
    to advance the job queue.
externalDocs:
  url: ''
  description: ''
warnings: []
