openapi: 3.0.0
servers:
- url: https://ws.spraakbanken.gu.se/ws/min-sb
  description: Test server
info:
  title: Min SB API
  version: 0.0.dev0
  description: '# Introduction

    Web API serving as a backend to Min Språkbank.


    # Overview

    For now the API is used for uploading corpus data to a user''s Nextcloud

    instance and processing that data with Sparv.


    A user must have a valid Nextcloud account at Språkbanken Text. Before any

    data can be uploaded, Min Språkbank must be initialised (see

    <a href="#operation/initMinSB">init Min SB</a>).'
  x-logo:
    url: placeholder
  contact:
    name: Språkbanken
    url: https://spraakbanken.gu.se/
    email: sb-info@svenska.gu.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /init:
    post:
      summary: init Min SB
      description: 'Call this route before using Min SB for the first time. Creates
        a directory in your Nextcloud instance which will be used by Min SB.


        ### Example


        ```.bash

        curl -X POST -u some_username ''{{host}}/init''

        ```'
      operationId: initMinSB
      parameters: []
      responses:
        '200':
          description: Init Min SB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Min Språkbank successfully initialized!
        '404':
          description: init Min SB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
              example:
                status: error
                message: Failed to initialize Min Språkbank! Directory 'Min Språkbank'
                  already exists!
      tags:
      - Manage Data
  /upload-corpus:
    put:
      summary: upload corpus
      description: 'Uploads corpus files to Nextcloud. All files within one corpus
        must have the same file extension (`.xml` or `.txt`).


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" -F "files[0]=@/absolute/path/to/localfile1.txt"
        -F "files[1]=@/absolute/path/to/localfile2.txt" ''{{host}}/upload-corpus''

        ```'
      operationId: uploadcorpus
      parameters: []
      responses:
        '200':
          description: upload corpus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Corpus 'min-testkorpus' successfully uploaded!
        '404':
          description: upload corpus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
              example:
                status: error
                message: Failed to upload corpus 'min_testkorpus'!
                info: Corpus ID is invalid!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - corpus_id
              - file
              properties:
                corpus_id:
                  type: string
                  example: min-testkorpus
                file:
                  type: string
                  format: binary
            example:
            - key: corpus_id
              value: min-testkorpus
              type: text
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/dokument2.xml
              - /home/anne/Downloads/testkorpus/dokument1.xml
      tags:
      - Manage Data
  /list-corpora:
    get:
      summary: list corpora
      description: 'Lists the names of previously uploaded corpora.


        ### Example


        ```.bash

        curl -u some_username ''{{host}}/list-corpora''

        ```'
      operationId: listcorpora
      parameters:
      - $ref: '#/components/parameters/'
      responses:
        '200':
          description: list corpora
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Listing available corpora
                corpora:
                - min-testkorpus
      tags:
      - Manage Data
  /upload-config:
    put:
      summary: upload config
      description: 'Uploads a corpus config file. File must be in yaml format. Read
        more about corpus config files in [the Sparv Pipeline documentation](https://spraakbanken.gu.se/sparv/#/user-manual/corpus-configuration).


        If a config file already exists for the given corpus it will be replaced by
        the newly uploaded one.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" -F "files[0]=@/absolute/path/to/config.yaml;type=text/yaml"
        ''{{host}}/upload-config''

        ```'
      operationId: uploadconfig
      parameters:
      - $ref: '#/components/parameters/corpus_id'
      responses:
        '200':
          description: upload config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Config file successfully uploaded for 'min-testkorpus'!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src: /home/anne/Downloads/testkorpus/config.yaml
      tags:
      - Manage Data
  /update-corpus:
    put:
      summary: update corpus
      description: 'Updates, adds and removes corpus files. When uploading a file
        with a name that already exists you can replace corpus files. Files that should
        be removed are listed in the `remove` query parameter or in the `remove` key
        in the uploaded form.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/update-corpus''
        -F "remove=some_filepath,another_filepath" -F "files[0]=@/absolute/path/to/some_localfile.txt"

        ```'
      operationId: updatecorpus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/remove'
      - name: remove
        in: query
        required: true
        style: form
        schema:
          type: string
          example: dokument1_copy.xml,dokument2_copy.xml
      responses:
        '200':
          description: update corpus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Corpus 'min-testkorpus' successfully updated!
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            example:
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/dokument1_copy.xml
              - /home/anne/Downloads/testkorpus/dokument2_copy.xml
              disabled: true
            - key: ''
              type: file
              src:
              - /home/anne/Downloads/testkorpus/dokument2.xml
              - /home/anne/Downloads/testkorpus/dokument1.xml
      tags:
      - Manage Data
  /clear-annotations:
    delete:
      summary: clear annotations
      description: 'Clears the annotation directory for the provided corpus on the
        Sparv server. This is useful if you want to process a previously annotated
        corpus with a new corpus config file.


        ### Example


        ```.bash

        curl -X DELETE -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/clear-annotations''

        ```'
      operationId: clearannotations
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - name: ''
        in: query
        required: true
        style: form
        schema:
          type: number
      responses:
        '200':
          description: clear annotations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Annotations for 'min-testkorpus' successfully removed!
                sparv_output: '''export'' directory removed

                  ''sparv-workdir'' directory removed'
      tags:
      - Manage Data
  /remove-corpus:
    delete:
      summary: remove corpus
      description: 'Removes a corpus from Nextcloud. Will attempt to abort any running
        job for this corpus and also remove it from the Sparv server.


        ### Example


        ```.bash

        curl -X DELETE -u some_username ''{{host}}/remove-corpus?corpus_id=some_corpus_name''

        ```'
      operationId: removecorpus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: remove corpus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Corpus 'min-testkorpus' successfully removed!
        '404':
          description: remove corpus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
              example:
                status: error
                message: Corpus 'min-testkorpus' does not exist!
      tags:
      - Manage Data
  /list-exports:
    get:
      summary: list exports
      description: 'Lists the available export files created by Sparv.


        ### Example


        ```.bash

        curl -X GET -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/list-exports''

        ```'
      operationId: listexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Manage Data
  /download-exports:
    get:
      summary: download exports
      description: 'Download all available export files created by Sparv.


        ### Example


        ```.bash

        curl -X GET -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/download-exports''

        ```'
      operationId: downloadexports
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Manage Data
  /run-sparv:
    put:
      summary: run Sparv
      description: 'Adds an annotation job to the queue. The requested export formats
        are supplied as a comma-separated list to the `exports` query parameter or
        the `exports` key in the form.


        There can only be one annotation job for each corpus at a time. A job must
        finish annotating and sync to Nextcloud or aborted (N.B: not yet implemented!)
        before a new one can be started.


        ### Example


        ```.bash

        curl -X PUT -u some_username -F "corpus_id=some_corpus_name" -F "exports=csv_export:csv,stats_export:freq_list,xml_export:pretty"
        ''{{host}}/run-sparv''

        ```'
      operationId: runSparv
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      - $ref: '#/components/parameters/exports'
      responses:
        '200':
          description: run Sparv
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Job has been queued!
                job_status: waiting
                priority: 1
      tags:
      - Process Corpus
  /check-status:
    get:
      summary: check status
      description: 'Checks the status of an annotation job. The different job status
        codes can be looked up by calling [{{host}}/status-codes](`{{host}}/status-codes`).


        ### Example


        ```.bash

        curl -X GET -u some_username -F "corpus_id=some_corpus_name" ''{{host}}/check-status''

        ```'
      operationId: checkstatus
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: min-testkorpus
      responses:
        '200':
          description: check status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Sparv is running!
                sparv_output: 'Progress: 6%'
                job_status: annotating
      tags:
      - Process Corpus
  /api-spec:
    get:
      summary: API specification
      description: Gets the open API specification (in json format) for this API.
      operationId: APIspecification
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Documentation
  /api-doc:
    get:
      summary: API documentation
      description: Renders the API documentation in html.
      operationId: APIdocumentation
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      tags:
      - Documentation
  /status-codes:
    get:
      summary: status codes
      description: List job status codes along with their descriptions.
      operationId: statuscodes
      parameters: []
      responses:
        '200':
          description: status codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
              example:
                status: success
                message: Listing existing job status codes
                status_codes:
                - code: 0
                  name: none
                  description: Job does not exist
                - code: 1
                  name: syncing_corpus
                  description: Syncing from Nextcloud to Sparv server
                - code: 2
                  name: waiting
                  description: Waiting to be run with Sparv
                - code: 3
                  name: annotating
                  description: Sparv annotation process is running
                - code: 4
                  name: done_annotating
                  description: Annotation process is no longer running
                - code: 5
                  name: syncing_results
                  description: Syncing results from Sparv to Nextcloud
                - code: 6
                  name: done
                  description: Done processing with Sparv
                - code: 7
                  name: error
                  description: An error occurred
                - code: 8
                  name: aborted
                  description: Aborted by the user
      tags:
      - Documentation
components:
  schemas:
    '200':
      type: object
      properties:
        status:
          type: string
          description: ''
          default: success
        message:
          type: string
          description: ''
          default: Min Språkbank successfully initialized!
    '404':
      type: object
      properties:
        status:
          type: string
          description: ''
          default: error
        message:
          type: string
          description: ''
          default: Failed to initialize Min Språkbank! Directory 'Min Språkbank' already
            exists!
  parameters:
    ? ''
    : name: ''
      in: query
      required: true
      style: form
      schema:
        type: number
    corpus_id:
      name: corpus_id
      in: query
      required: true
      style: form
      schema:
        type: string
        example: min-testkorpus
    remove:
      name: remove
      in: query
      required: true
      style: form
      schema:
        type: string
        example: dokument1.xml,dokument2.xml
    exports:
      name: exports
      in: query
      required: true
      style: form
      schema:
        type: string
        example: csv_export:csv,stats_export:freq_list,xml_export:pretty
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
- basicAuth: []
tags:
- name: Manage Data
  description: Routes for uploading, viewing, updating and removing corpus data on
    Nextcloud.
- name: Process Corpus
  description: Routes for starting corpus annotation jobs with Sparv and checking
    job status.
- name: Documentation
  description: Routes used for documentation purposes.
externalDocs:
  url: ''
  description: ''
warnings: []
