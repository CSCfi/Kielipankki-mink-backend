variables:
  standard-corpus: mink-dxh6e6wtff
  fake-corpus: mink-dxh6e6wtfg

info:
  title: Mink API
  version: 0.0.dev0
  description: |-
    # Introduction
    Web API serving as a backend to Mink.

    For now the API is used for uploading corpus data to a storage server and processing that data with Sparv.

    # Workflow
    A workflow for processing data with Sparv via Mink could look like this:
    
    1. <a href="#operation/createcorpus">Create a new corpus</a>
    2. <a href="#operation/uploadsources">Upload some corpus source files</a>
    3. <a href="#operation/uploadconfig">Upload a corpus config file</a>
    4. <a href="#operation/runSparv">Run Sparv</a>
    5. <a href="#operation/checkstatus">Check the status</a>
    6. <a href="#operation/downloadexports">Download export files</a>

    # Parameters
    Parameters such as `corpus_id` can usually be provided as a query parameter or as form data.
    The following two examples will thus result in the same response:

    `curl -X GET '{{host}}/list-sources?corpus_id=some_corpus_name' -H 'Authorization: Bearer YOUR_JWT`

    `curl -X GET -F "corpus_id=some_corpus_name" '{{host}}/list-sources' -H 'Authorization: Bearer YOUR_JWT`

    # Responses
    Most responses will be in json format. Json responses contain a `status` field which will have the value `success`
    if the response code is 200 and `error` otherwise. Thus this `status` merely reports whether the call was processed
    correctly. Most responses contain a `message` field with information about what was done during the call or where
    things went wrong. Each call may have an arbitrary amount of additional fields containing more information or data.

  x-logo:
    url: placeholder
  contact:
    name: Spr√•kbanken
    url: https://spraakbanken.gu.se/
    email: sb-info@svenska.gu.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://ws.spraakbanken.gu.se/ws/min-sb
    description: Test server

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
#   basicAuth:
#     type: http
#     scheme: basic
  ApiKeyAuth:
    type: apiKey
    in: query
    name: secret_key
# Overriding these is only necessary because params cannot be made optional in Postman
parameters:
    exports:
      name: exports
      in: query
      required: false
      style: form
      schema:
        type: string
        example: csv_export:csv,stats_export:freq_list,xml_export:pretty
    files:
      name: files
      in: query
      required: false
      style: form
      schema:
        type: string
        example: dokument1,document2
    zip:
      name: zip
      in: query
      required: false
      style: form
      schema:
        type: string
        example: 'true'

security:
  - bearerAuth: []

tags:
  - name: Manage Corpora
    description: Routes for creating, listing and removing corpora.
  - name: Manage Sources
    description: Routes for uploading, listing, downloading and removing corpus source files.
  - name: Manage Config
    description: Routes for uploading and downloading corpus config files.
  - name: Manage Exports
    description: Routes for listing, downloading and removing export files.
  - name: Process Corpus
    description: Routes for starting/aborting corpus annotation jobs with Sparv and checking job status.
  - name: Admin Mode
    description: Activate/deactivate admin mode.
  - name: Documentation
    description: Routes used for documentation purposes.
  - name: Internal Routes
    description: Routes for internal use only. These routes are used by the queue manager to advance the job queue.

paths:
  /api-spec:
    get:
      security: []
  /api-doc:
    get:
      security: []
  /status-codes:
    get:
      security: []
  /advance-queue:
    put:
      security:
        - ApiKeyAuth: []
  /check-status:
    get:
      parameters:
      - name: corpus_id
        in: query
        required: false
        style: form
        schema:
          type: string
          example: mink-dxh6e6wtff
  /sparv-languages:
    get:
      security: []
  /sparv-exports:
    get:
      security: []
      parameters:
      - name: language
        in: query
        required: false
        style: form
        schema:
          type: string
          example: swe
  /download-exports:
    get:
      security: []
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: mink-dxh6e6wtff
      - name: zip
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'true'
      - name: file
        in: query
        required: false
        style: form
        schema:
          type: string
          example: csv/dokument2.csv
      - name: dir
        in: query
        required: false
        style: form
        schema:
          type: string
          example: csv
  /download-sources:
    get:
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: mink-dxh6e6wtff
      - name: file
        in: query
        required: false
        style: form
        schema:
          type: string
          example: dokument1.xml
      - name: zip
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'true'
  /upload-config:
    put:
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: mink-dxh6e6wtff
      - name: config
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'metadata:\n    id: mink-dxh6e6wtff\nimport:\n    document_annotation:
            text\n    importer: xml_import:parse\nexport:\n    annotations:\n        -
            <sentence>:misc.id\n        - <token:baseform>\n        - <token:pos>\n        -
            <token>:sensaldo.sentiment_label\n        - SWE_DEFAULT.swener\n    source_annotations:\n        -
            dokument as document\n        - text:forfattare as author\n        - ...\ncsv_export:\n    source_annotations:\n        -
            text:id\n        - text:date\n        - text:forfattare as author'
  /install-corpus:
    put:
      parameters:
      - name: corpus_id
        in: query
        required: true
        style: form
        schema:
          type: string
          example: mink-dxh6e6wtff
      - name: scramble
        in: query
        required: false
        style: form
        schema:
          type: string
          example: 'true'
